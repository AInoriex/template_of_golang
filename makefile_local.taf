TAF_PATH    := ${GOPATH}
#-------------------------------------------------------------------------------
#fix cgo compile error
export LC_ALL   = en_US.UTF-8
export LANG     = en_US.UTF-8
#-------------------------------------------------------------------------------
GOPATH ?= $(shell go env GOPATH)
GOROOT ?= $(shell go env GOROOT)
GO          = ${GOROOT}/bin/go

copyfile = if test -z "$(APP)" || test -z "$(TARGET)"; then \
               echo "['APP' or 'TARGET' option is empty.]"; exit 1; \
           	else \
		       	if test ! -d $(2); then \
              		echo "[No such dir:$(2), now we create it.]";\
    				mkdir -p $(2);\
				fi; \
         		echo "[Copy file $(1) -> $(2)]"; \
         		cp -v $(1) $(2); \
			fi;
#----------------------------------------------------------------------------------
$(TARGET): $(GO_SRC)
	GOOS=linux $(GO)  build -mod=vendor -o $@

prod pre beta alpha local: $(TARGET) $(CONFIG)
	@if [ -d $(TARGET)_tmp_dir ]; then \
		echo "dir has exist:$(TARGET)_tmp_dir, abort."; \
		exit 1; \
	else \
		mkdir $(TARGET)_tmp_dir $(TARGET)_tmp_dir/$(TARGET); \
		cp -rf $(TARGET) $(CONFIG) $(TARGET)_tmp_dir/$(TARGET); \
		echo "copy conf file"; \
	    if [[ robot = $(TARGET) || filter = $(TARGET) ]]; then \
          cp -rf config/* $(TARGET)_tmp_dir/$(TARGET); \
        fi; \
	    if [[ goim = $(APP) ]]; then \
		  cp -rf ../../../../conf/$@/*.json $(TARGET)_tmp_dir/$(TARGET); \
		  cp -rf ../../../../conf/$@/*.toml $(TARGET)_tmp_dir/$(TARGET); \
        else \
		  cp -rf ../../../conf/$@/*.json $(TARGET)_tmp_dir/$(TARGET); \
		  cp -rf ../../../conf/$@/*.conf $(TARGET)_tmp_dir/$(TARGET); \
        fi; \
		cd $(TARGET)_tmp_dir; tar --exclude=".svn" --exclude="_svn" -czvf $(TARGET).tgz $(TARGET)/; cd ..; \
		if [ -f "$(ROOTPATH)/bin/$(TARGET)/$@/$(TARGET).tgz" ]; then \
			mv -vf $(ROOTPATH)/bin/$(TARGET)/$@/$(TARGET).tgz $(ROOTPATH)/bin/$(TARGET)/$@/$(TARGET).`date +%Y%m%d%H%M%S`.tgz; \
		fi; \
		mv $(TARGET)_tmp_dir/$(TARGET).tgz ./; \
		rm -rf $(TARGET)_tmp_dir; \
		echo "tar cvfz $(TARGET).tgz ..."; \
		mkdir -p $(ROOTPATH)/bin/$(TARGET)/$@; \
		mv $(TARGET) $(ROOTPATH)/bin/$(TARGET)/$@/; \
		mv $(TARGET)*tgz $(ROOTPATH)/bin/$(TARGET)/$@/; \
	fi

HELP += $(HELP_TAR)

ifneq ($(JCE_SRC),)

SERVER_NAME := $(TARGET)
SERVER_DIR  := /home/tafjce/$(APP)/$(SERVER_NAME)

release: $(JCE_SRC)
	@$(call copyfile, $(JCE_SRC) , $(SERVER_DIR))

HELP += $(HELP_RELEASE)
endif
#----------------------------------------------------------------------------------

clean:
	rm -vf $(DEPEND_JCE_OBJ) $(INVOKE_DEPEND_JCE_OBJ) $(LOCAL_OBJ) $(TARGET) $(TARGETS) $(DEP_FILE) ${CLEANFILE} .*.d.tmp gmon.out
	rm -vf *$(TARGET)*.tgz

cleanall:
	rm -vf $(DEPEND_JCE_H) $(DEPEND_JCE_CPP) $(DEPEND_JCE_OBJ) $(LOCAL_OBJ) $(HCE_H) $(HCE_CPP) $(TARGET) $(TARGETS) $(DEP_FILE) ${CLEANFILE} *.o .*.d.tmp .*.d gmon.out

HELP += $(HELP_CLEAN)
HELP += $(HELP_CLEANALL)

HELP_RELEASE  = "\n\e[1;33mrelease\e[0m:\t[copy '\e[1;32m$(ICE_SRC) $(ICE_H) $(ICE_OBJ)\e[0m' -> '/home/tafjce/$(APP)/$(TARGET)']"
HELP_CLEAN    = "\n\e[1;33mclean\e[0m:\t\t[remove $(LOCAL_OBJ) $(TARGET)]"
HELP_CLEANALL = "\n\e[1;33mcleanall\e[0m:\t[clean & rm .*.d]"
HELP_TAR      = "\n\e[1;33mtar\e[0m:\t\t[will do 'tar $(TARGET).tgz $(RELEASE_FILE)']"

help:
	@echo -e $(HELP)"\n"

#-------------------------------------------------------------------------------